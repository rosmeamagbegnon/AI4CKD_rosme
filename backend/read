

npm install cors @types/cors

Installer Sequelize
npm install sequelize


npm init -y

Installer le driver de ta base (par exemple PostgreSQL)
npm install pg pg-hstore


npm install express pg dotenv cors

npm install --save-dev nodemon

npm install morgan

npm install multer

On utilise pdfkit ou pdfmake (plus puissant pour les styles). Ici, on part avec pdfkit.



npm install pdfkit

commande pour faire les test 
npm install --save-dev jest supertest

commande pour lancer les tests
npm test

Lancer les migrations Sequelize
Assure-toi que tu as installé Sequelize CLI :


npm install --save sequelize-cli
a. Initialiser Sequelize (si pas encore fait)


npx sequelize-cli init
b. Exécuter les migrations


npx sequelize-cli db:migrate
Cela lira les fichiers dans le dossier migrations/ et créera les tables définies.
# Projet Gestion Médicale Node.js

Ce projet est une API RESTful développée avec **Node.js**, **Express** et **Sequelize** pour gérer des dossiers médicaux, consultations, maladies chroniques, allergies, et données cliniques.

---

## Fonctionnalités principales

- Gestion des patients : création, modification, suppression, consultation
- Gestion des consultations médicales (création, historique, mise à jour)
- Gestion des maladies chroniques associées aux patients
- Gestion des allergies des patients
- Gestion des données cliniques avec alertes santé automatisées
- Uploads de fichiers médicaux (à intégrer) Export PDF des dossiers médicaux
- Recherches avancées sur patients

---

## Technologies utilisées

- Node.js & Express (backend serveur)
- Sequelize (ORM pour la base de données)
- PostgreSQL (base de données recommandée, mais compatible MySQL, SQLite)
- Multer (gestion des fichiers uploadés)
- Cors (gestion des requêtes cross-origin)
- Morgan (logs HTTP)
- Nodemon (rechargement automatique en dev)

---

